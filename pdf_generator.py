from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.lib import colors
from datetime import datetime

def calculate_tax(income):
    tax = 0
    if income <= 250000:
        tax = 0
    elif income <= 500000:
        tax = (income - 250000) * 0.05
    elif income <= 1000000:
        tax = (250000 * 0.05) + (income - 500000) * 0.2
    else:
        tax = (250000 * 0.05) + (500000 * 0.2) + (income - 1000000) * 0.3
    return tax

def draw_box(c, x, y, width, height, title):
    # Draw section box with title
    c.setStrokeColor(colors.black)
    c.setLineWidth(1)
    c.rect(x, y - height, width, height, stroke=1, fill=0)

    # Title background
    c.setFillColor(colors.lightgrey)
    c.rect(x, y - 30, width, 30, stroke=0, fill=1)
    c.setFillColor(colors.black)
    c.setFont("Helvetica-Bold", 13)
    c.drawString(x + 10, y - 22, title)

def generate_pdf_report(username, data):
    filename = f"{username}_report.pdf"
    c = canvas.Canvas(filename, pagesize=A4)
    width, height = A4
    margin = 50
    current_y = height - margin

    # Title
    c.setFont("Helvetica-Bold", 20)
    c.drawString(margin, current_y, f"Tax Filing Report: {username.title()}")
    current_y -= 30

    # Timestamp
    c.setFont("Helvetica", 12)
    c.drawString(margin, current_y, f"Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    current_y -= 40

    section_height = 140
    section_width = width - 2 * margin
    box_x = margin

    def draw_content(content_list, start_y):
        c.setFont("Helvetica", 11)
        y = start_y - 45
        for line in content_list:
            c.drawString(box_x + 20, y, line)
            y -= 18

    # Section 1: Balance Sheet
    balance_lines = [
        f"Income: {data['income']}.Rs",
        f"Expenses: {sum(data['expenses'])}.Rs",
        f"Investments: {sum(data['investments'])}.Rs",
        f"Capital Gains: {sum(data['capital_gains'])}.Rs",
        f"Loans: {sum(data['loans'])}.Rs",
        f"GST Inputs: {sum(data['gst_inputs'])}.Rs"
    ]
    draw_box(c, box_x, current_y, section_width, section_height, "1. Balance Sheet")
    draw_content(balance_lines, current_y)
    current_y -= section_height + 20

    # Section 2: Income Statement
    total_income = data['income'] + sum(data['capital_gains'])
    total_expenses = sum(data['expenses']) + sum(data['investments'])
    net_income = total_income - total_expenses
    income_lines = [
        f"Total Income: {total_income}.Rs",
        f"Total Expenses: {total_expenses}.Rs",
        f"Net Income: {net_income}.Rs"
    ]
    draw_box(c, box_x, current_y, section_width, section_height - 40, "2. Income Statement")
    draw_content(income_lines, current_y)
    current_y -= (section_height - 40) + 20

    # Section 3: Tax Calculation
    tax = calculate_tax(data['income'])
    gst_credit = sum(data['gst_inputs']) * 0.18
    total_tax = max(tax - gst_credit, 0)
    tax_lines = [
        f"Taxable Income: {data['income']}.Rs",
        f"Calculated Tax (as per slabs): {tax:.2f}.Rs",
        f"GST Credit (18% assumed): {gst_credit:.2f}.Rs",
        f"Final Tax Payable: {total_tax:.2f}"
    ]
    draw_box(c, box_x, current_y, section_width, section_height - 20, "3. Tax Calculation")
    draw_content(tax_lines, current_y)
    current_y -= (section_height - 20) + 30

    # Footer
    c.setFont("Helvetica-Oblique", 10)
    c.drawString(margin, 30, "This document was generated by the Tax Filing System Â© 2025")

    c.save()
    return filename
